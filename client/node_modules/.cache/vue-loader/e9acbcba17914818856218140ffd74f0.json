{"remainingRequest":"C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&","dependencies":[{"path":"C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\src\\components\\Home.vue","mtime":1614477482764},{"path":"C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613609551400},{"path":"C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1613609572218},{"path":"C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1613609551400},{"path":"C:\\Users\\dunka\\Documents\\GitHub\\notifweather\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1613609572217}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}